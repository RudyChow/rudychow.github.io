<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>线上问题 on Rudy&#39;s blog</title>
    <link>https://rudychow.github.io/categories/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/</link>
    <description>Recent content in 线上问题 on Rudy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 31 Jul 2020 23:28:01 +0800</lastBuildDate><atom:link href="https://rudychow.github.io/categories/%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线上问题：锁超时</title>
      <link>https://rudychow.github.io/post/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E9%94%81%E8%B6%85%E6%97%B6/</link>
      <pubDate>Fri, 31 Jul 2020 23:28:01 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E9%94%81%E8%B6%85%E6%97%B6/</guid>
      <description>问题记录 门店反馈POS机在用户成功付款时等待很久，并且弹出错误提示。于是查看日志，发现相关接口出现数据库锁超时的报错：Lock wait timeout exceeded; try restarting transaction。
问题定位 客户端的付款流程是先调用付款接口，如果付款接口返回“用户支付中”或者没有正确得到相应结果，客户端会接着调用查询支付结果的接口，且线上日志正是查询支付接结果的接口报了锁超时的错误。
需要注意的是锁超时和死锁是不一样的。
锁超时（Lock wait timeout exceeded）：一般体现在前一个事务对记录进行了锁操作，但未进行提交或者回滚，后一个事务在等待前面的事务释放锁，但是等待的时间超出了innodb_lock_wait_timeout的值，而引起的现象。 死锁（Dead Lock）：两个或两个以上的事务在执行过程中，互相等待对方释放相同资源的锁的现象。 在知道锁超时产生原因的前提下，需要检查付款接口以及查询付款结果接口的代码逻辑即可。
// 付款 function pay($orderId) { begin; try{ insert into child_order (order_id) values ($orderId); // 第三方支付 thirdPay(); commit; }catch($exception){ rollback; } } // 查询支付结果 function query($orderId) { // 第三方查询支付结果 $isPaid = queryPayResult(); // 锁超时异常点 $isPaid and insert into child_order (order_id) values ($orderId); } 两个接口都对相同订单号进行了insert操作。如果是普通的insert操作，即使第一个事务没有完成，第二个事务的insert也不会产生锁超时的情况。之所以产生锁超时，是因为order_id字段是唯一索引。第一个事务的insert会获取到锁，如果没有完成事务，第二个insert由于是相同的order_id，也就进入了等待锁的情况。
从上面的代码看来没什么问题，该commit的地方commit了，该rollback的地方rollback了。于是我们怀疑程序在调用第三方支付请求太久，导致支付时的事务一直无法完成。但是进一步看代码，我们在请求第三方接口时做了超时限制，如果超过30s没有得到相应结果，则会自动抛出异常，猜测不成立。
而且在请求第三方接口后，即便超时，我们也会记录日志。这次问题还有个可疑的点：我们没有找到任何这次请求第三方支付的日志，也没有找到关于这次付款接口的请求日志。
于是我联系服务商，询问这次接口的情况情况，他们也提供给我们对应的接口日志，日志上显示付款成功。
像这种HTTP请求会产生网络IO导致协程切换，这次的问题仿佛就像协程切换出去，但是没有切回来，导致后续的代码没有继续执行下去，也就因此没有了日志。
由于是偶现情况，尚未找到问题产生的原因，但仍需要找办法解决问题。
解决方法 杀掉线程 由于是前面的事务未完成，所以最直接的解决办法就是kill掉对应的事务线程即可。
首先通过select * from innodb_trx查看到MySQL当前正在运行中的事务。</description>
    </item>
    
    <item>
      <title>线上问题：到底是几次请求？</title>
      <link>https://rudychow.github.io/post/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E5%88%B0%E5%BA%95%E6%98%AF%E5%87%A0%E6%AC%A1%E8%AF%B7%E6%B1%82/</link>
      <pubDate>Fri, 03 Jul 2020 18:52:50 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%E5%88%B0%E5%BA%95%E6%98%AF%E5%87%A0%E6%AC%A1%E8%AF%B7%E6%B1%82/</guid>
      <description>问题记录 运营反馈的问题：顾客成功付款，但是POS机显示在Loading，最后弹窗提示“请校准系统时间”，但是在管理后台能查看到顾客成功付款的订单数据。
POS机发出的每一个请求都会携带签名和时间戳，后端服务在接受到请求后会进行签名和时间戳的检验，如果时间戳与服务器当前时间差在20s以上，则会返回“请校准系统时间”的错误信息。
问题定位 后台的接口日志现实响应成功，并且处理了对应逻辑，整个请求的时间在30s左右，但POS机收到的响应结果却是“请校准系统时间”。
一开始怀疑POS机发送了两次请求，第一次请求成功，第二次请求因为网络原因导致出现该错误。
+-------+ http1 +--------+ | +--------------&amp;gt;+ | | | | | | +&amp;lt;--------------+ | | | 200 | | | POS | | server | | | http2 | | | +--------------&amp;gt;+ | | | | | | +&amp;lt;--------------+ | +-------+ error +--------+ 但在POS机记录的请求日志中，客户端发起请求直至得到响应结果前，都没有发送过第二次请求。并且在POS机发起的请求中，其携带的链路ID是可以追踪到我们后台对应的请求日志，也就是响应成功的那一个日志。
错误信息原因 假设不存在网络问题，那就是POS机与服务器的时间确实相差了20秒以上。该逻辑不成立，如果真的是系统时间不准确，每个从POS机发出的请求都会得到这个错误响应，整个POS机也无法正常运行，而现实情况中POS机运行正常，只有这个特例。
如果是网络问题，则POS机的该请求达到我们服务器确实用了20秒以上的时间。该逻辑不成立，根据POS机的链路ID记录请求达到服务器花了1秒不到的时间，而且服务器中也进行了业务处理，对应的数据库记录的时间也吻合，日志也记录了正确的响应结果。
我们能确保的是POS机记录的请求和服务器记录的请求是同一个请求，因为请求携带的链路ID确实一致。于是我猜测另外一种可能性：Nginx负载均衡的超时重发。
+-----------+ +----------+ +-----------+ | | | | http(timeout) | | | | | +-------------------&amp;gt;+ | | | | | | | | | http | | 20s | | | POS +------------&amp;gt;+ Nginx | | server | | | | | http | | | | | +-------------------^+ | | | | +v-------------------+ | | | | | error | | | | | | | | | | | +&amp;lt;-------------------+ | +-----------+ +----------+ 200 +-----------+ 猜想验证 Nginx配置：</description>
    </item>
    
  </channel>
</rss>
