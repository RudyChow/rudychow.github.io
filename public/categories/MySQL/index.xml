<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on Rudy&#39;s blog</title>
    <link>https://rudychow.github.io/categories/MySQL/</link>
    <description>Recent content in MySQL on Rudy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Tue, 05 Jan 2021 23:38:36 +0800</lastBuildDate><atom:link href="https://rudychow.github.io/categories/MySQL/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>查询语句的访问方式</title>
      <link>https://rudychow.github.io/post/MySQL/%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E7%9A%84%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Tue, 05 Jan 2021 23:38:36 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/MySQL/%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E7%9A%84%E8%AE%BF%E9%97%AE%E6%96%B9%E5%BC%8F/</guid>
      <description>简单总结一下 MySQL 表的访问方式： 等值 const： 最多只能有一个匹配记录，这个方式应用在聚簇索引或唯一索引上。 eq_ref： 和 const 差不多的性能，不过用在连表上。当连接的</description>
    </item>
    
    <item>
      <title>Join算法</title>
      <link>https://rudychow.github.io/post/MySQL/join%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 03 Jan 2021 23:42:34 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/MySQL/join%E7%AE%97%E6%B3%95/</guid>
      <description>MySQL 目前主要的 join 算法有两类：Hash Join 和 Nested-Loop Join。 Hash Join Hash Join 是 MySQL 在 8.0.18 后支持的连表算法，这个时候的 Hash Join 有两个阶段： build 构建阶段下，MySQL 会将小的表作为构建，构建的</description>
    </item>
    
    <item>
      <title>事务</title>
      <link>https://rudychow.github.io/post/MySQL/%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 28 Dec 2020 22:58:32 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/MySQL/%E4%BA%8B%E5%8A%A1/</guid>
      <description>事务是数据库区别于文件系统的重要特性之一。数据库系统引入事务的主要目的：事务会把数据库从一种一致状态转移为另一种一致状态。在数据库提交工作时，可以确保要么所有修</description>
    </item>
    
    <item>
      <title>undo日志</title>
      <link>https://rudychow.github.io/post/MySQL/undo%E6%97%A5%E5%BF%97/</link>
      <pubDate>Sun, 13 Dec 2020 21:33:54 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/MySQL/undo%E6%97%A5%E5%BF%97/</guid>
      <description>undo log 主要有两个作用：事务回滚和 MVCC。 到底是什么是 undo log ？前面说到 InnoDB 表空间存放着许多不同类型的页，undo log 就是其中的一种类型。它和 redo log 不同，是一种逻辑日志，记</description>
    </item>
    
    <item>
      <title>B&#43;树二叉查询</title>
      <link>https://rudychow.github.io/post/MySQL/B&#43;%E6%A0%91%E4%BA%8C%E5%8F%89%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Sun, 13 Dec 2020 17:53:23 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/MySQL/B&#43;%E6%A0%91%E4%BA%8C%E5%8F%89%E6%9F%A5%E8%AF%A2/</guid>
      <description>B+树是通过二叉查找树，再由平衡二叉树，B数演化而来。 我们知道从一组有序数字数组中查找目标记录，使用二分查找法（Binary Search）是一种有效的方式，复杂</description>
    </item>
    
    <item>
      <title>InnoDB存储结构</title>
      <link>https://rudychow.github.io/post/MySQL/InnoDB%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</link>
      <pubDate>Tue, 08 Dec 2020 23:09:35 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/MySQL/InnoDB%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/</guid>
      <description>从 InnoDB 存储引擎的逻辑存储结构看，所有数据都被逻辑地存在一个空间中，称为表空间（tablespace）。表空间又由段（segment）、区（extent）、页（pa</description>
    </item>
    
    <item>
      <title>redo日志</title>
      <link>https://rudychow.github.io/post/MySQL/redo%E6%97%A5%E5%BF%97/</link>
      <pubDate>Sun, 06 Dec 2020 11:57:57 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/MySQL/redo%E6%97%A5%E5%BF%97/</guid>
      <description>结合最近的学习总结一下 redo log 相关的知识，以及回答之前的困惑。 redo log 与 bin log 这两个日志是我之前经常迷惑的地方，因为两者在不同层面上都能实现恢复数据的效果。 要了解两者的区</description>
    </item>
    
    <item>
      <title>《InnoDB存储引擎》笔记：文件</title>
      <link>https://rudychow.github.io/post/MySQL/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 05 Dec 2020 19:04:43 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/MySQL/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%AC%94%E8%AE%B0%E6%96%87%E4%BB%B6/</guid>
      <description>这一章节重点在 bin log 以及 InnoDB 存储引擎文件。 参数文件 MySQL 实例启动时，会先读一个配置参数文件，用来寻找数据库的各种文件所在位置以及指定某些初始化参数，用户可以通过怕命令m</description>
    </item>
    
    <item>
      <title>《InnoDB存储引擎》笔记：InnoDB存储引擎</title>
      <link>https://rudychow.github.io/post/MySQL/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%AC%94%E8%AE%B0InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Fri, 04 Dec 2020 22:23:00 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/MySQL/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%AC%94%E8%AE%B0InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>这一章节随便拿出一小节都可以单独写一篇文章，这里仅做笔记和总结。 体系架构 后台线程 InnoDB 存储引擎是多线程的模型，因此后台有多个不同的后台线程，负责处理不同的任务。 Master Thread</description>
    </item>
    
    <item>
      <title>《InnoDB存储引擎》笔记：MySQL体系结构和存储引擎</title>
      <link>https://rudychow.github.io/post/MySQL/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%AC%94%E8%AE%B0MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
      <pubDate>Fri, 04 Dec 2020 18:02:36 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/MySQL/InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E7%AC%94%E8%AE%B0MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%92%8C%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
      <description>这一节主要是一些基础概念和介绍，所以此处只进行了基本的笔记总结。 数据库与实例 数据库：物理操作系统文件或其他形式文件类型的集合。 实例：MySQL 数据库由后台线程以</description>
    </item>
    
    <item>
      <title>MySQL索引相关概念（1）</title>
      <link>https://rudychow.github.io/post/MySQL/MySQL%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B51/</link>
      <pubDate>Mon, 17 Aug 2020 23:53:56 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/MySQL/MySQL%E7%B4%A2%E5%BC%95%E7%9B%B8%E5%85%B3%E6%A6%82%E5%BF%B51/</guid>
      <description>前缀索引（Index Prefixes） 前缀索引，即是你可以通过字段的前N个字符去创建一个索引。当你想为TEXT或者BLOB字段创建索引时，必须指定长度。 ## 创建测</description>
    </item>
    
  </channel>
</rss>
