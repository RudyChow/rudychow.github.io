<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis on Rudy&#39;s blog</title>
    <link>https://rudychow.github.io/categories/Redis/</link>
    <description>Recent content in Redis on Rudy&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 13 Dec 2020 13:45:54 +0800</lastBuildDate><atom:link href="https://rudychow.github.io/categories/Redis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vscode下使用GDB调试Redis</title>
      <link>https://rudychow.github.io/post/Redis/Vscode%E4%B8%8B%E4%BD%BF%E7%94%A8GDB%E8%B0%83%E8%AF%95Redis/</link>
      <pubDate>Sun, 13 Dec 2020 13:45:54 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Vscode%E4%B8%8B%E4%BD%BF%E7%94%A8GDB%E8%B0%83%E8%AF%95Redis/</guid>
      <description>配置.vscode/launch.json： { &amp;#34;version&amp;#34;: &amp;#34;0.2.0&amp;#34;, &amp;#34;configurations&amp;#34;: [ { &amp;#34;name&amp;#34;: &amp;#34;redis启动&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;cppdbg&amp;#34;, &amp;#34;request&amp;#34;: &amp;#34;launch&amp;#34;, &amp;#34;program&amp;#34;: &amp;#34;${workspaceFolder}/src/redis-server&amp;#34;, &amp;#34;args&amp;#34;: [&amp;#34;${workspaceFolder}/redis.conf&amp;#34;], &amp;#34;stopAtEntry&amp;#34;: false, &amp;#34;cwd&amp;#34;: &amp;#34;${workspaceFolder}&amp;#34;, &amp;#34;environment&amp;#34;: [], &amp;#34;externalConsole&amp;#34;: false, &amp;#34;MIMode&amp;#34;: &amp;#34;gdb&amp;#34;, &amp;#34;preLaunchTask&amp;#34;: &amp;#34;make redis&amp;#34;, &amp;#34;setupCommands&amp;#34;: [ { &amp;#34;description&amp;#34;: &amp;#34;为 gdb 启</description>
    </item>
    
    <item>
      <title>Redis源码阅读阶段总结</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 16 Nov 2020 06:21:00 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E9%98%B6%E6%AE%B5%E6%80%BB%E7%BB%93/</guid>
      <description>把 Redis 分成几个部分来阅读，目前的阅读情况： 多机： 集群 复制 哨兵 单机： ae db 持久化： AOF RDB 数据结构： SDS ZIPLIST INISET ADLIST SKIPLIST DICT QUICKLIST GEO OBJECT BITMAP HYPERLOGLOG 其它功能： BLOCK PUBSUB BIO EVICT SLOWLOG 事务 LUA Redis6： 多线程 ACL</description>
    </item>
    
    <item>
      <title>Redis源码：多线程</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Sun, 15 Nov 2020 16:31:01 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
      <description>Redis6 有了不少更新：ACL 权限、RESP3 协议、SSL等等，其中包括了多线程。 以往的 Redis 在处理网络 IO 时是单线程，在新版本中引入了多线程。默认是关闭的，需要修改配置进行</description>
    </item>
    
    <item>
      <title>Redis源码：内存淘汰策略</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</link>
      <pubDate>Fri, 06 Nov 2020 06:36:51 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</guid>
      <description>当 Redis 的内存达到一定值时，会触发自身的内存淘汰策略，目的是为了避免内存的增长。Redis 内存相关的淘汰策略代码主要在src/evict.c里。 相关配置 配置文件中的</description>
    </item>
    
    <item>
      <title>Redis源码：aof</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81aof/</link>
      <pubDate>Sun, 01 Nov 2020 23:54:03 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81aof/</guid>
      <description>Redis 的另一个持久化的功能叫AOF（Append Only File），原理是用户执行一条命令，就追加记录一条下来，可以联想 MySQL 的 binlog。 初始化 Redis 通过loadServer</description>
    </item>
    
    <item>
      <title>Redis源码：rdb</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81rdb/</link>
      <pubDate>Sat, 31 Oct 2020 20:40:57 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81rdb/</guid>
      <description>Redis 有两种数据持久化策略，其中一种是RDB（Redis database），属于快照持久化的方式。它分为主动备份和定时备份两种方式去运行。 主动备份 当执行save或者</description>
    </item>
    
    <item>
      <title>Redis源码：事务</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Fri, 30 Oct 2020 18:39:35 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E4%BA%8B%E5%8A%A1/</guid>
      <description>Redis 与事务相关的命令有：multi、discard、exec和watch。 multi、discard和exec这是一组命令，与MySQL的begin、rollba</description>
    </item>
    
    <item>
      <title>Redis源码：pub和sub</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81pub%E5%92%8Csub/</link>
      <pubDate>Wed, 28 Oct 2020 23:52:02 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81pub%E5%92%8Csub/</guid>
      <description>Redis 中使用订阅与发布同样可以达到 block 的效果。 数据结构 客户端： typedef struct client { dict *pubsub_channels; /* 普通订阅，key是channel，value为null */ list *pubsub_patterns; /* 匹配模式的订阅*/ } client; 服务端</description>
    </item>
    
    <item>
      <title>Redis源码：从bpop看block</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E4%BB%8Ebpop%E7%9C%8Bblock/</link>
      <pubDate>Mon, 26 Oct 2020 23:48:25 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E4%BB%8Ebpop%E7%9C%8Bblock/</guid>
      <description>Redis 中可以通过brpop、blpop和brpoplpush来实现对列表的阻塞 pop 操作。 Redis 在处理主逻辑是单线程的，如果使用上述的命令进行阻塞操作的话，后面的请求也会一</description>
    </item>
    
    <item>
      <title>Redis源码：一个命令的执行流程</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Thu, 15 Oct 2020 11:23:53 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E4%B8%80%E4%B8%AA%E5%91%BD%E4%BB%A4%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B/</guid>
      <description>一个命令的执行过程，我们大概可以分成三步骤：建立连接，发送命令，得到结果。下面会针对这三个命令，结合源码进行分析： 建立连接 建立连接要从acceptTcpHand</description>
    </item>
    
    <item>
      <title>Redis源码：redisDB</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81redisDB/</link>
      <pubDate>Wed, 14 Oct 2020 22:22:47 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81redisDB/</guid>
      <description>redisDB 即是 database，是 Redis 的数据库。它是变量server里的一个成员变量数组，数组大小默认是 16。 客户端默认使用第一个数据库，其间可以使用select进行 db 的</description>
    </item>
    
    <item>
      <title>Redis源码：入口函数main</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0main/</link>
      <pubDate>Wed, 14 Oct 2020 15:03:38 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0main/</guid>
      <description>main 函数是程序执行的起点，也是大家就阅读源码的入口。要了解 Redis 的初始化和运行过程，还是要通过 main 函数入手。 已一个单机的 Redis 为例，main 函数主要可以分成以下几个步骤： 初</description>
    </item>
    
    <item>
      <title>Redis源码：bio</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81bio/</link>
      <pubDate>Mon, 12 Oct 2020 16:39:29 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81bio/</guid>
      <description>Redis 的主线程处理事件循环，所以我们常说 Redis 是单线程的（Redis6 之后加入了多线程模型）。但是在 Redis 中，也存在着 3 条线程，专门处理一些其它操作。 初始化 bio 的初始化在sr</description>
    </item>
    
    <item>
      <title>Redis源码：object</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81object/</link>
      <pubDate>Sun, 11 Oct 2020 12:25:01 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81object/</guid>
      <description>我们经常使用 Redis 的基础命令有string、set、list、hashtable和zset。在 Redis 的底层中，我们不是直接使用它们对应的数据结构，而是通过 object 对这些基础命</description>
    </item>
    
    <item>
      <title>Redis源码：skiplist</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81skiplist/</link>
      <pubDate>Thu, 08 Oct 2020 12:13:32 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81skiplist/</guid>
      <description>skiplist 是 Redis 对于跳跃表的一个实现，它也是 zset 的主要实现。网上关于 skiplist 数据结构的介绍有很多，这里主要记录 Redis 中的实现方式。 数据结构 // 跳表节点 typedef struct zskiplistNode { sds ele; double score; struct zskiplistNode *backward; struct zskiplistLevel { struct zskiplistNode *forward;</description>
    </item>
    
    <item>
      <title>Redis源码：intset</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81intset/</link>
      <pubDate>Thu, 08 Oct 2020 10:46:35 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81intset/</guid>
      <description>intset 就是整数集合。这个集合只包含了整数，并且不回有重复数据。Redis 常用的 set 命令，当符合 intset 的情况时，底层就会使用 intset 去实现，其余情况则使用 dict。 数据结构 #define INTSET_ENC_INT16 (sizeof(int16_t))</description>
    </item>
    
    <item>
      <title>Redis源码：dict</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81dict/</link>
      <pubDate>Wed, 07 Oct 2020 22:26:33 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81dict/</guid>
      <description>dict 是 Redis 对于 hashtable 的表现，我们常用的 hash 命令底层就是通过 dict 实现的（严谨一点的话，一开始会使用 ziplist 作为实现，到一定阈值后才使用 dict）。 数据结构 // 字典 typedef struct dict { dictType *type; void *privdata; dictht ht[2];</description>
    </item>
    
    <item>
      <title>Redis源码：quicklist</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81quicklist/</link>
      <pubDate>Wed, 07 Oct 2020 15:34:26 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81quicklist/</guid>
      <description>quicklist 全称是a generic doubly linked quicklist，从全称可以看得出这是一个节点存放 ziplist 的双向链表。我们常用的 list 功能，底层就是使用 quicklist 实现的。 数据结构 // 双向链表结构体 typedef struct quicklist { quicklistNode *head; quicklistNode</description>
    </item>
    
    <item>
      <title>Redis源码：ziplist</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81ziplist/</link>
      <pubDate>Tue, 06 Oct 2020 18:40:41 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81ziplist/</guid>
      <description>ziplist，又称作压缩列表，它是 Redis 内部定义的连续的内存组成的数据结构，目的是减少内存碎片，节省内存空间。 数据结构 ziplist主要由三部分组成：header</description>
    </item>
    
    <item>
      <title>Redis源码：adlist</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81adlist/</link>
      <pubDate>Mon, 05 Oct 2020 15:45:16 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81adlist/</guid>
      <description>adlist 全称是a generic doubly linked list，是 Redis 内部实现的一个双向链表。旧版本中，list 是使用 adlist 实现的，后面的版本改成用 quicklist 实现。 数据结构 // 链表节点 typedef struct listNode { struct listNode *prev; struct listNode *next; void *value; } listNode; //</description>
    </item>
    
    <item>
      <title>Redis源码：sds</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81sds/</link>
      <pubDate>Fri, 25 Sep 2020 23:09:58 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81sds/</guid>
      <description>sds 全称是simple dynamic string，是 Redis 用来实现字符串的一个数据结构。 数据结构 在 C 中，简单的动态字符串结构通常会记录长度和内容： struct string { char *buf;// 字符指针 uint32_t len; // 字符串长</description>
    </item>
    
    <item>
      <title>Redis源码：AE时间事件</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81AE%E6%97%B6%E9%97%B4%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Wed, 23 Sep 2020 23:40:53 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81AE%E6%97%B6%E9%97%B4%E4%BA%8B%E4%BB%B6/</guid>
      <description>Redis 的时间事件相比起文件事件简单不少（以 Redis5.0.9 为例）。 aeEventLoop aeEventLoop是Redis全局的结构体对象，所有跟事件有关的数据和状态都存储在这上面： // 只展示时间事件</description>
    </item>
    
    <item>
      <title>Redis源码：AE文件事件</title>
      <link>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81AE%E6%96%87%E4%BB%B6%E4%BA%8B%E4%BB%B6/</link>
      <pubDate>Sat, 19 Sep 2020 11:46:17 +0800</pubDate>
      
      <guid>https://rudychow.github.io/post/Redis/Redis%E6%BA%90%E7%A0%81AE%E6%96%87%E4%BB%B6%E4%BA%8B%E4%BB%B6/</guid>
      <description>Redis 的事件模块分为文件事件和时间事件。文件事件主要是处理网络 IO 事件，而时间事件主要处理 Redis 自身的一些定时任务。 这里会先对 Redis 的文件事件的源码进行简单地阅读并且分析（以</description>
    </item>
    
  </channel>
</rss>
